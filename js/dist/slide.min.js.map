{"version":3,"sources":["slide.js"],"names":["$","document","ready","slide","querySelector","slideWidth","clientWidth","prevBtn","nextBtn","slideItems","querySelectorAll","maxSlide","length","currSlide","startSlide","startElem","createElement","tagName","forEach","endElem","classList","add","endSlide","c","innerHTML","after","i","setAttribute","nextMove","offset","concat","setTimeout","prevMove","addEventListener","window","startPoint","e","endPoint","pageX","loopInterval","setInterval","buttonReplay","buttonStop","contBtn","stopStatus","log","console","before","clearInterval"],"mappings":"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","file":"slide.min.js","sourcesContent":["\n$(document).ready(function () { // 슬라이크 전체 크기(width 구하기)\n    const slide = document.querySelector(\".slide\");\n    let slideWidth = slide.clientWidth;\n\n    // 버튼 엘리먼트 선택하기\n    const prevBtn = document.querySelector(\".slide_prev_button\");\n    const nextBtn = document.querySelector(\".slide_next_button\");\n    const contBtn = document.querySelector(\".slide_control_button\");\n\n    // 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\n    let slideItems = document.querySelectorAll(\".slide_item\");\n    // 현재 슬라이드 위치가 슬라이드 개수를 넘기지 않게 하기 위한 변수\n    const maxSlide = slideItems.length;\n\n    // 버튼 클릭할 때 마다 현재 슬라이드가 어디인지 알려주기 위한 변수\n    let currSlide = 1;\n\n    // 무한 슬라이드를 위해 start, end 슬라이드 복사하기\n    const startSlide = slideItems[0];\n    const endSlide = slideItems[slideItems.length - 1];\n\n    // 엘리먼트 생성\n    const startElem = document.createElement(startSlide.tagName);\n    const endElem = document.createElement(endSlide.tagName);\n\n    // 엘리먼트에 클래스 적용 동일하게 하기\n    endSlide.classList.forEach((c) => endElem.classList.add(c));\n    endElem.innerHTML = endSlide.innerHTML;\n    startSlide.classList.forEach((c) => startElem.classList.add(c));\n    startElem.innerHTML = startSlide.innerHTML;\n\n    // 각 복제한 엘리먼트를 각 위치에 추가하기\n    slideItems[0].before(endElem);\n    slideItems[slideItems.length - 1].after(startElem);\n\n    // 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\n    slideItems = document.querySelectorAll(\".slide_item\");\n    let offset = slideWidth * currSlide;\n    slideItems.forEach((i) => {\n        i.setAttribute(\"style\", `left: ${-offset}px`);\n    });\n\n    function nextMove() {\n        currSlide++;\n        // 마지막 슬라이드 이상으로 넘어가지 않게 하기 위해서\n        if (currSlide <= maxSlide) {\n            // 슬라이드를 이동시키기 위한 offset 계산\n            const offset = slideWidth * currSlide;\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `left: ${-offset}px`);\n            });\n        } else {\n            // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n            currSlide = 0;\n            let offset = slideWidth * currSlide;\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n            });\n            currSlide++;\n            offset = slideWidth * currSlide;\n            // 각 슬라이드 아이템의 left에 offset 적용\n            // setTimeout을 사용하는 이유는 비동기 처리를 이용해 transition이 제대로 적용되게 하기 위함\n            setTimeout(() => {\n                // 각 슬라이드 아이템의 left에 offset 적용\n                slideItems.forEach((i) => {\n                    i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n                });\n            }, 0);\n        }\n    }\n    function prevMove() {\n        currSlide--;\n        // 1번째 슬라이드 이하로 넘어가지 않게 하기 위해서\n        if (currSlide > 0) {\n            // 슬라이드를 이동시키기 위한 offset 계산\n            const offset = slideWidth * currSlide;\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `left: ${-offset}px`);\n            });\n        } else {\n            // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n            currSlide = maxSlide + 1;\n            let offset = slideWidth * currSlide;\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n            });\n            currSlide--;\n            offset = slideWidth * currSlide;\n            setTimeout(() => {\n                // 각 슬라이드 아이템의 left에 offset 적용\n                slideItems.forEach((i) => {\n                    // i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n                    i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n                });\n            }, 0);\n        }\n    }\n\n    // 버튼 엘리먼트에 클릭 이벤트 추가하기\n    nextBtn.addEventListener(\"click\", () => {\n        // 이후 버튼 누를 경우 현재 슬라이드를 변경\n        nextMove();\n    });\n    // 버튼 엘리먼트에 클릭 이벤트 추가하기\n    prevBtn.addEventListener(\"click\", () => {\n        // 이전 버튼 누를 경우 현재 슬라이드를 변경\n        prevMove();\n    });\n\n    // 브라우저 화면이 조정될 때 마다 slideWidth를 변경하기 위해\n    window.addEventListener(\"resize\", () => {\n        slideWidth = slide.clientWidth;\n    });\n    // 드래그(스와이프) 이벤트를 위한 변수 초기화\n    let startPoint = 0;\n    let endPoint = 0;\n\n    // PC 클릭 이벤트 (드래그)\n    slide.addEventListener(\"mousedown\", (e) => {\n        startPoint = e.pageX; // 마우스 드래그 시작 위치 저장\n    });\n\n    slide.addEventListener(\"mouseup\", (e) => {\n        endPoint = e.pageX; // 마우스 드래그 끝 위치 저장\n        if (startPoint < endPoint) {\n            // 마우스가 오른쪽으로 드래그 된 경우\n            prevMove();\n        } else if (startPoint > endPoint) {\n            // 마우스가 왼쪽으로 드래그 된 경우\n            nextMove();\n        }\n    });\n\n    // 기본적으로 슬라이드 루프 시작하기\n    let loopInterval = setInterval(() => {\n        nextMove();\n    }, 6000);\n    const buttonStop = document.querySelector(\".buttonStop\");\n    const buttonReplay = document.querySelector(\".buttonReplay\");\n    var stopStatus = false;\n    contBtn.addEventListener(\"click\", () => {\n        if (stopStatus == false) {\n            buttonStop.setAttribute(\"style\", 'opacity: 0');\n            buttonReplay.setAttribute(\"style\", 'opacity: 1');\n            clearInterval(loopInterval);\n            stopStatus = true;\n        } else {\n            buttonStop.setAttribute(\"style\", 'opacity: 1');\n            buttonReplay.setAttribute(\"style\", 'opacity: 0');\n            loopInterval = setInterval(() => {\n                nextMove();\n            }, 6000);\n            stopStatus = false;\n        }\n        console.log(stopStatus);\n    });\n});// 슬라이크 전체 크기(width 구하기)\nconst slide = document.querySelector(\".slide\");\nlet slideWidth = slide.clientWidth;\n\n// 버튼 엘리먼트 선택하기\nconst prevBtn = document.querySelector(\".slide_prev_button\");\nconst nextBtn = document.querySelector(\".slide_next_button\");\nconst contBtn = document.querySelector(\".slide_control_button\");\n\n// 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\nlet slideItems = document.querySelectorAll(\".slide_item\");\n// 현재 슬라이드 위치가 슬라이드 개수를 넘기지 않게 하기 위한 변수\nconst maxSlide = slideItems.length;\n\n// 버튼 클릭할 때 마다 현재 슬라이드가 어디인지 알려주기 위한 변수\nlet currSlide = 1;\n\n// 무한 슬라이드를 위해 start, end 슬라이드 복사하기\nconst startSlide = slideItems[0];\nconst endSlide = slideItems[slideItems.length - 1];\n\n// 엘리먼트 생성\nconst startElem = document.createElement(startSlide.tagName);\nconst endElem = document.createElement(endSlide.tagName);\n\n// 엘리먼트에 클래스 적용 동일하게 하기\nendSlide.classList.forEach((c) => endElem.classList.add(c));\nendElem.innerHTML = endSlide.innerHTML;\nstartSlide.classList.forEach((c) => startElem.classList.add(c));\nstartElem.innerHTML = startSlide.innerHTML;\n\n// 각 복제한 엘리먼트를 각 위치에 추가하기\nslideItems[0].before(endElem);\nslideItems[slideItems.length - 1].after(startElem);\n\n// 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\nslideItems = document.querySelectorAll(\".slide_item\");\nlet offset = slideWidth * currSlide;\nslideItems.forEach((i) => {\n    i.setAttribute(\"style\", `left: ${-offset}px`);\n});\n\nfunction nextMove() {\n    currSlide++;\n    // 마지막 슬라이드 이상으로 넘어가지 않게 하기 위해서\n    if (currSlide <= maxSlide) {\n        // 슬라이드를 이동시키기 위한 offset 계산\n        const offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `left: ${-offset}px`);\n        });\n    } else {\n        // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n        currSlide = 0;\n        let offset = slideWidth * currSlide;\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n        });\n        currSlide++;\n        offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        // setTimeout을 사용하는 이유는 비동기 처리를 이용해 transition이 제대로 적용되게 하기 위함\n        setTimeout(() => {\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n            });\n        }, 0);\n    }\n}\nfunction prevMove() {\n    currSlide--;\n    // 1번째 슬라이드 이하로 넘어가지 않게 하기 위해서\n    if (currSlide > 0) {\n        // 슬라이드를 이동시키기 위한 offset 계산\n        const offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `left: ${-offset}px`);\n        });\n    } else {\n        // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n        currSlide = maxSlide + 1;\n        let offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n        });\n        currSlide--;\n        offset = slideWidth * currSlide;\n        setTimeout(() => {\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                // i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n                i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n            });\n        }, 0);\n    }\n}\n\n// 버튼 엘리먼트에 클릭 이벤트 추가하기\nnextBtn.addEventListener(\"click\", () => {\n    // 이후 버튼 누를 경우 현재 슬라이드를 변경\n    nextMove();\n});\n// 버튼 엘리먼트에 클릭 이벤트 추가하기\nprevBtn.addEventListener(\"click\", () => {\n    // 이전 버튼 누를 경우 현재 슬라이드를 변경\n    prevMove();\n});\n\n// 브라우저 화면이 조정될 때 마다 slideWidth를 변경하기 위해\nwindow.addEventListener(\"resize\", () => {\n    slideWidth = slide.clientWidth;\n});\n// 드래그(스와이프) 이벤트를 위한 변수 초기화\nlet startPoint = 0;\nlet endPoint = 0;\n\n// PC 클릭 이벤트 (드래그)\nslide.addEventListener(\"mousedown\", (e) => {\n    startPoint = e.pageX; // 마우스 드래그 시작 위치 저장\n});\n\nslide.addEventListener(\"mouseup\", (e) => {\n    endPoint = e.pageX; // 마우스 드래그 끝 위치 저장\n    if (startPoint < endPoint) {\n        // 마우스가 오른쪽으로 드래그 된 경우\n        prevMove();\n    } else if (startPoint > endPoint) {\n        // 마우스가 왼쪽으로 드래그 된 경우\n        nextMove();\n    }\n});\n\n// 기본적으로 슬라이드 루프 시작하기\nlet loopInterval = setInterval(() => {\n    nextMove();\n}, 6000);\nconst buttonStop = document.querySelector(\".buttonStop\");\nconst buttonReplay = document.querySelector(\".buttonReplay\");\nvar stopStatus = false;\ncontBtn.addEventListener(\"click\", () => {\n    if (stopStatus == false) {\n        buttonStop.setAttribute(\"style\", 'opacity: 0');\n        buttonReplay.setAttribute(\"style\", 'opacity: 1');\n        clearInterval(loopInterval);\n        stopStatus = true;\n    } else {\n        buttonStop.setAttribute(\"style\", 'opacity: 1');\n        buttonReplay.setAttribute(\"style\", 'opacity: 0');\n        loopInterval = setInterval(() => {\n            nextMove();\n        }, 6000);\n        stopStatus = false;\n    }\n    console.log(stopStatus);\n});"]}