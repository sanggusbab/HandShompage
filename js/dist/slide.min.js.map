{"version":3,"sources":["slide.js"],"names":["slide","document","querySelector","slideWidth","clientWidth","prevBtn","nextBtn","slideItems","querySelectorAll","maxSlide","length","currSlide","startSlide","startElem","createElement","endSlide","tagName","endElem","classList","forEach","c","add","innerHTML","after","i","setAttribute","nextMove","offset","concat","setTimeout","prevMove","addEventListener","window","startPoint","e","endPoint","pageX","loopInterval","setInterval","buttonReplay","buttonStop","contBtn","stopStatus"],"mappings":"aACA,IAAMA,MAAQC,SAASC,cAAc,UADrCC,WAAAH,MAAAI,YAKMC,QAAUJ,SAASC,cAAc,sBAAjCG,QAAUJ,SAASC,cAAc,sBACjCI,QAAUL,SAASC,cAAc,yBAInCK,WAAaN,SAASO,iBAAiB,eAErCC,SAAWF,WAAWG,OAGxBC,UAAY,EAGVC,WAAaL,WAAW,GAIxBM,SAAYZ,WAASa,WAAcF,OAAAA,GAIzCG,UAAAd,SAA2Ba,cAAAF,WAAAI,SAAAC,QAAchB,SAACiB,cAAfH,SAAAC,SAE3BJ,SAAAA,UAAWM,QAAUC,SAArBC,GAAqBD,OAAQF,QAAAC,UAAAG,IAAAD,KAAAH,QAAAK,UAAiBJ,SAAUG,UAA3BT,WAA7BM,UAAAC,QAAA,SAAAC,GAAA,OAAAP,UAAAK,UAAAG,IAAAD,KACAP,UAAUS,UAAYV,WAAWU,UAIjCf,WAAWA,GAAAA,OAAUU,SAArBV,WAAWA,WAAWG,OAAS,GAAGa,MAAMV,WAKxCN,WAAWY,SAAQX,iBAAO,eACtBgB,IAAEC,OAAAA,WAAFd,UAGJ,SAASe,WAKD,KAFJf,WAEmBR,SAAaQ,CAA5B,IAAMgB,EAASxB,WAAaQ,UAGtBc,WAAAA,QAAa,SAAfD,GADJA,EAAAC,aAAA,QAAA,SAAAG,QAAAD,EAAA,aAIA,CAEIA,IAAAA,EAASxB,YADbQ,UAAY,GAEZJ,WAAWY,QAAQ,SAACK,GAApBjB,EAAUkB,aAAS,QAAnBlB,eAAAA,OAA0B,EAA1BA,aAA0BoB,EAA1BpB,SAGAI,EAASR,aAHTQ,UAOAkB,WAAW,WACPtB,WAAAY,QAAA,SAAAK,GACUA,EAACL,aAAQ,QAAT,eAAAS,OAAgB,EAAhB,aAAgBD,EAAhB,UAAV,IAKX,SAAAG,WAEGnB,GACA,IADAA,UACA,CACIA,IAAAA,EAAeR,WAAAQ,UAETgB,WAASxB,QAAAA,SAAAA,GAGXqB,EAAEC,aAAa,QAAf,SAAAG,QAAkCD,EAAlC,aADJpB,CAJJ,IAOOoB,EAAAxB,YAHHQ,UAAAF,SAAA,GAKAE,WAAYF,QAAW,SAAvBe,GAIIA,EAAEC,aAAa,QAAf,eAAAG,OAAuC,EAAvC,aAAqDD,EAArD,SAGJA,EAASxB,aADTQ,UAHAJ,WAAWY,WAAXZ,WAAAY,QAAA,SAAAK,GAISrB,EAAAA,aAAaQ,QAAbR,eAAAA,OAAT,EAASA,aAATwB,EAASxB,UAEL,IApDXI,WAFDY,QAAA,SAAAK,GACIA,EAAEC,aAAa,QAAf,SAAAG,QAAkCD,OAAlC,SA0DKrB,QANSyB,iBAAV,QAAA,WAURL,aACApB,QAAQyB,iBAAiB,QAAS,WAE9BL,aAIAM,OAAAD,iBAAA,SAAA,WACAD,WAAQ9B,MAAAI,cAIZ4B,IAAAA,WAAOD,EACH5B,SAAaH,EAGjBA,MAAIiC,iBAAJ,YAAA,SAAAC,GACIC,WAIaD,EAFjBE,QAEIH,MAAAA,iBADuC,UACjB,SAAAC,GAD1BC,SAAAD,EAAAE,MAIML,WAAAA,SAIED,WAFJK,SAAIF,YAEAH,aAKP,IAEDO,aAAAC,YAAA,WAEIZ,YADJ,KACIA,WAAQzB,SAAAC,cAAA,eACTqC,aAFHtC,SAAAC,cAAA,iBAGMsC,YAAavC,EACnBwC,QAAMF,iBAAetC,QAASC,WAKtBqC,WAJR,GAAIG,YACIX,WAAAA,aAAR,QAAkC,cAC1BW,aAAcjB,aAAO,QAAA,cACrBe,cAAWf,eACEA,IAEbiB,WAAajB,aAAb,QAAA,cAJJc,aAKOd,aAAA,QAAA,cACHe,aAAWf,YAAX,WACAc,YACAF,MACY,GAEZK,QAAAA,IAAUA","file":"slide.min.js","sourcesContent":["// 슬라이크 전체 크기(width 구하기)\nconst slide = document.querySelector(\".slide\");\nlet slideWidth = slide.clientWidth;\n\n// 버튼 엘리먼트 선택하기\nconst prevBtn = document.querySelector(\".slide_prev_button\");\nconst nextBtn = document.querySelector(\".slide_next_button\");\nconst contBtn = document.querySelector(\".slide_control_button\");\n\n// 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\nlet slideItems = document.querySelectorAll(\".slide_item\");\n// 현재 슬라이드 위치가 슬라이드 개수를 넘기지 않게 하기 위한 변수\nconst maxSlide = slideItems.length;\n\n// 버튼 클릭할 때 마다 현재 슬라이드가 어디인지 알려주기 위한 변수\nlet currSlide = 1;\n\n// 무한 슬라이드를 위해 start, end 슬라이드 복사하기\nconst startSlide = slideItems[0];\nconst endSlide = slideItems[slideItems.length - 1];\n\n// 엘리먼트 생성\nconst startElem = document.createElement(startSlide.tagName);\nconst endElem = document.createElement(endSlide.tagName);\n\n// 엘리먼트에 클래스 적용 동일하게 하기\nendSlide.classList.forEach((c) => endElem.classList.add(c));\nendElem.innerHTML = endSlide.innerHTML;\nstartSlide.classList.forEach((c) => startElem.classList.add(c));\nstartElem.innerHTML = startSlide.innerHTML;\n\n// 각 복제한 엘리먼트를 각 위치에 추가하기\nslideItems[0].before(endElem);\nslideItems[slideItems.length - 1].after(startElem);\n\n// 슬라이드 전체를 선택해 값을 변경해주기 위해 슬라이드 전체 선택하기\nslideItems = document.querySelectorAll(\".slide_item\");\nlet offset = slideWidth * currSlide;\nslideItems.forEach((i) => {\n    i.setAttribute(\"style\", `left: ${-offset}px`);\n});\n\nfunction nextMove() {\n    currSlide++;\n    // 마지막 슬라이드 이상으로 넘어가지 않게 하기 위해서\n    if (currSlide <= maxSlide) {\n        // 슬라이드를 이동시키기 위한 offset 계산\n        const offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `left: ${-offset}px`);\n        });\n    } else {\n        // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n        currSlide = 0;\n        let offset = slideWidth * currSlide;\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n        });\n        currSlide++;\n        offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        // setTimeout을 사용하는 이유는 비동기 처리를 이용해 transition이 제대로 적용되게 하기 위함\n        setTimeout(() => {\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n            });\n        }, 0);\n    }\n}\nfunction prevMove() {\n    currSlide--;\n    // 1번째 슬라이드 이하로 넘어가지 않게 하기 위해서\n    if (currSlide > 0) {\n        // 슬라이드를 이동시키기 위한 offset 계산\n        const offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `left: ${-offset}px`);\n        });\n    } else {\n        // 무한 슬라이드 기능 - currSlide 값만 변경해줘도 되지만 시각적으로 자연스럽게 하기 위해 아래 코드 작성\n        currSlide = maxSlide + 1;\n        let offset = slideWidth * currSlide;\n        // 각 슬라이드 아이템의 left에 offset 적용\n        slideItems.forEach((i) => {\n            i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n        });\n        currSlide--;\n        offset = slideWidth * currSlide;\n        setTimeout(() => {\n            // 각 슬라이드 아이템의 left에 offset 적용\n            slideItems.forEach((i) => {\n                // i.setAttribute(\"style\", `transition: ${0}s; left: ${-offset}px`);\n                i.setAttribute(\"style\", `transition: ${2}s; left: ${-offset}px`);\n            });\n        }, 0);\n    }\n}\n\n// 버튼 엘리먼트에 클릭 이벤트 추가하기\nnextBtn.addEventListener(\"click\", () => {\n    // 이후 버튼 누를 경우 현재 슬라이드를 변경\n    nextMove();\n});\n// 버튼 엘리먼트에 클릭 이벤트 추가하기\nprevBtn.addEventListener(\"click\", () => {\n    // 이전 버튼 누를 경우 현재 슬라이드를 변경\n    prevMove();\n});\n\n// 브라우저 화면이 조정될 때 마다 slideWidth를 변경하기 위해\nwindow.addEventListener(\"resize\", () => {\n    slideWidth = slide.clientWidth;\n});\n// 드래그(스와이프) 이벤트를 위한 변수 초기화\nlet startPoint = 0;\nlet endPoint = 0;\n\n// PC 클릭 이벤트 (드래그)\nslide.addEventListener(\"mousedown\", (e) => {\n    startPoint = e.pageX; // 마우스 드래그 시작 위치 저장\n});\n\nslide.addEventListener(\"mouseup\", (e) => {\n    endPoint = e.pageX; // 마우스 드래그 끝 위치 저장\n    if (startPoint < endPoint) {\n        // 마우스가 오른쪽으로 드래그 된 경우\n        prevMove();\n    } else if (startPoint > endPoint) {\n        // 마우스가 왼쪽으로 드래그 된 경우\n        nextMove();\n    }\n});\n\n// 기본적으로 슬라이드 루프 시작하기\nlet loopInterval = setInterval(() => {\n    nextMove();\n}, 6000);\nconst buttonStop = document.querySelector(\".buttonStop\");\nconst buttonReplay = document.querySelector(\".buttonReplay\");\nvar stopStatus = false;\ncontBtn.addEventListener(\"click\", () => {\n    if (stopStatus == false) {\n        buttonStop.setAttribute(\"style\", 'opacity: 0');\n        buttonReplay.setAttribute(\"style\", 'opacity: 1');\n        clearInterval(loopInterval);\n        stopStatus = true;\n    } else {\n        buttonStop.setAttribute(\"style\", 'opacity: 1');\n        buttonReplay.setAttribute(\"style\", 'opacity: 0');\n        loopInterval = setInterval(() => {\n            nextMove();\n        }, 6000);\n        stopStatus = false;\n    }\n    console.log(stopStatus);\n});\n"]}